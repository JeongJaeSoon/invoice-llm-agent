name: 'Setup Python and Poetry'
description: 'Setup Python and Poetry with caching'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'
  cache-key:
    description: 'Cache key for dependencies'
    required: false
    default: ''
  restore-only:
    description: 'Only restore from cache without installation'
    required: false
    default: 'false'

outputs:
  cache-key:
    description: 'Generated cache key for dependencies'
    value: ${{ steps.cache-key.outputs.value }}

runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install Poetry
      shell: bash
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      shell: bash
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        if [ "${{ inputs.cache-key }}" != "" ]; then
          echo "value=${{ inputs.cache-key }}" >> $GITHUB_OUTPUT
        else
          echo "value=poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT
        fi

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      if: inputs.restore-only == 'false'
      with:
        path: .venv
        key: ${{ steps.cache-key.outputs.value }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      if: inputs.restore-only == 'true'
      with:
        path: .venv
        key: ${{ inputs.cache-key }}
        fail-on-cache-miss: true

    - name: Install dependencies
      if: inputs.restore-only == 'false'
      shell: bash
      run: poetry install --no-interaction
